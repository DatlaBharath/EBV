{
  "language": "Solidity",
  "sources": {
    "contracts/Ebv.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\ncontract Ebv {\r\n    struct user {\r\n        string name;\r\n        address add;\r\n        string email;\r\n        string qualification;\r\n        string yearPO;\r\n    }\r\n    struct user2 {\r\n        string name;\r\n        address add;\r\n        string email;\r\n        string company;\r\n    }\r\n    struct document {\r\n        string docName;\r\n        bytes32 docHash;\r\n        string ipfs;\r\n    }\r\n\r\n    struct verifyStat {\r\n        bytes32 hashValue;\r\n        bool status;\r\n    }\r\n\r\n    mapping(address => document[]) public userData;\r\n\r\n    function getArray(address _address) public view returns (document[] memory) {\r\n        return userData[_address];\r\n    }\r\n\r\n    address immutable public i_owner;\r\n    string public i_ownerName = \"bharath\";\r\n    user[] public candidate;\r\n    user2[] public recruiter;\r\n    bytes32[] public arrHash;\r\n    verifyStat[] public VerifiedHash;\r\n\r\n    constructor() {\r\n        i_owner = msg.sender;\r\n    }\r\n\r\n    function addCandidateUser(string memory _username, address _address,string memory _email,string memory _qualification,string memory _yearPO) public {\r\n        uint check = 0;\r\n        for (uint256 i = 0; i < candidate.length; i++) {\r\n            if (candidate[i].add == _address) {\r\n                check = 1;\r\n            }\r\n        }\r\n        if (check == 0) {\r\n            candidate.push(user(_username, _address,_email,_qualification,_yearPO));\r\n        }\r\n    }\r\n\r\n    function addRecruiterUser(string memory _username, address _address,string memory _email,string memory _company) public {\r\n        uint check = 0;\r\n        for (uint256 i = 0; i < recruiter.length; i++) {\r\n            if (recruiter[i].add == _address) {\r\n                check = 1; \r\n            }\r\n        }\r\n        if (check == 0) {\r\n            recruiter.push(user2(_username, _address, _email,_company));\r\n        }\r\n    }\r\n\r\n\r\n    function candidateValidate(string memory _username, address _address) public view returns (bool) {\r\n        for (uint256 i = 0; i < candidate.length; i++) {\r\n            if (candidate[i].add == _address) {\r\n                return keccak256(abi.encodePacked(candidate[i].name)) == keccak256(abi.encodePacked(_username));\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function recruiterValidate(string memory _username, address _address) public view returns (bool) {\r\n        for (uint256 i = 0; i < recruiter.length; i++) {\r\n            if (recruiter[i].add == _address) {\r\n                return keccak256(abi.encodePacked(recruiter[i].name)) == keccak256(abi.encodePacked(_username));\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function uplodeCandidateDocument(string memory _docName, bytes32 _docHash, string memory _ipfs) public {\r\n        userData[msg.sender].push(document(_docName, _docHash,_ipfs));\r\n        uint k = 0;\r\n        for (uint256 j = 0; j < VerifiedHash.length; j++) {\r\n            if (VerifiedHash[j].hashValue == _docHash) {\r\n                k = 1;\r\n            }\r\n        }\r\n        if (k == 0) {\r\n            VerifiedHash.push(verifyStat(_docHash, false));\r\n        }\r\n    }\r\n\r\n    // function documentPush(string memory _docName) public {\r\n    //     uint k = 0;\r\n    //     for (uint256 i = 0; i < userData[msg.sender].length; i++) {\r\n    //         if (keccak256(abi.encodePacked(userData[msg.sender][i].docName)) == keccak256(abi.encodePacked(_docName))) {\r\n    //             for (uint256 j = 0; j < VerifiedHash.length; j++) {\r\n    //                 if (VerifiedHash[j].hashValue == userData[msg.sender][i].docHash) {\r\n    //                     k = 1;\r\n    //                 }\r\n    //             }\r\n    //             if (k == 0) {\r\n    //                 VerifiedHash.push(verifyStat(userData[msg.sender][i].docHash, false));\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    function hashArray(bytes32 _docHash) public {\r\n        arrHash.push(_docHash);\r\n    }\r\n\r\n    function hashVerify(bytes32 _hash) public {\r\n        for (uint256 i = 0; i < arrHash.length; i++) {\r\n            if (arrHash[i] == _hash) {\r\n                for (uint256 j = 0; j < VerifiedHash.length; j++) {\r\n                    if (VerifiedHash[j].hashValue == _hash) {\r\n                        VerifiedHash[j].status = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function ownerValidate(string memory _username, address _address) public view returns (bool) {\r\n        if (i_owner == _address) {\r\n            return keccak256(abi.encodePacked(i_ownerName)) == keccak256(abi.encodePacked(_username));\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getVerifiedDocuments(address _address) public view returns (document[] memory) {\r\n        document[] memory k = getArray(_address);\r\n        document[] memory l = new document[](k.length);\r\n        uint lIndex = 0;\r\n        uint t = 0;\r\n        for (uint i = 0; i < k.length; i++) {\r\n            t = 0;\r\n            for (uint j = 0; j < VerifiedHash.length; j++) {\r\n                if (VerifiedHash[j].hashValue == k[i].docHash && VerifiedHash[j].status == true) {\r\n                    t = 1;\r\n                    break;\r\n                }\r\n            }\r\n            if (t == 1) {\r\n                l[lIndex] = k[i];\r\n                lIndex++;\r\n            }\r\n        }\r\n        assembly {\r\n            mstore(l, lIndex)\r\n        }\r\n        return l;\r\n    }\r\n\r\n    function getNonVerifiedDocuments(address _address) public view returns (document[] memory) {\r\n        document[] memory k = getArray(_address);\r\n        document[] memory l = new document[](k.length);\r\n        uint lIndex = 0;\r\n        uint t;\r\n        for (uint i = 0; i < k.length; i++) {\r\n            t = 0;\r\n            for (uint j = 0; j < VerifiedHash.length; j++) {\r\n                if (VerifiedHash[j].hashValue == k[i].docHash && VerifiedHash[j].status == true) {\r\n                    t = 1;\r\n                }\r\n            }\r\n            if (t == 0) {\r\n                l[lIndex] = k[i];\r\n                lIndex++;\r\n            }\r\n        }\r\n        assembly {\r\n            mstore(l, lIndex)\r\n        }\r\n        return l;\r\n    }\r\n\r\n    function getToBeVerified() public view returns (bytes32[] memory) {\r\n        bytes32[] memory l = new bytes32[](VerifiedHash.length);\r\n        uint lIndex = 0;\r\n        for (uint i = 0; i < VerifiedHash.length; i++) {\r\n            if (!VerifiedHash[i].status) {\r\n                l[lIndex] = VerifiedHash[i].hashValue;\r\n                lIndex++;\r\n            }\r\n        }\r\n        return l;\r\n    }\r\n\r\n    function getCandidate() public view returns (user[] memory) {\r\n        return candidate;\r\n    }\r\n\r\n    function getRCandidate(address _address) public view returns (user memory) {\r\n        for (uint256 i = 0; i < candidate.length; i++) {\r\n            if (candidate[i].add == _address) {\r\n                return candidate[i];\r\n            }\r\n        }\r\n        return user('none',msg.sender,'none','none','0');\r\n    }\r\n    function getRbnCandidate(string memory _name) public view returns (user memory) {\r\n        for (uint256 i = 0; i < candidate.length; i++) {\r\n            if (keccak256(abi.encodePacked(candidate[i].name)) == keccak256(abi.encodePacked(_name))) {\r\n                return candidate[i];\r\n            }\r\n        }\r\n        return user('none',msg.sender,'none','none','0');\r\n    }\r\n    function getRRecruiter(address _address) public view returns (user2 memory) {\r\n        for (uint256 i = 0; i < recruiter.length; i++) {\r\n            if (recruiter[i].add == _address) {\r\n                return recruiter[i];\r\n            }\r\n        }\r\n        return user2('none',msg.sender,'none','none');\r\n    }\r\n    modifier ownerPower() {\r\n        require(msg.sender == i_owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}